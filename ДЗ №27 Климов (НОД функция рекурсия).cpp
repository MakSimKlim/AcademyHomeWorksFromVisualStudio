// Задание #2
// 
// ДЗ №27 Климов (НОД рекурсия)
//
// Написать рекурсивную функцию нахождения
//наибольшего общего делителя двух целых чисел.
//наибольший общий делитель - НОД (англ. greatest common divisor - Gcd) 

//Решение: последовательное вычитание из большего числа меньшего, 
//пока разность не станет меньше вычитаемого, 
//соответствует нахождению остатка от деления большего числа на меньшее. 
//На этом основан так называемый быстрый алгоритм Евклида:
// в паре чисел одно число делится с остатком на второе;
// делитель и полученный остаток формируют новую пару. 
//Действие повторяется, пока один из элементов пары не обратится в 0, 
//тогда значение другого будет равно искомому НОД.

Рекурсивная формулировка быстрого алгоритма:

    НОД(a, 0) = a
    НОД(a, b) = НОД(b, ОСТАТОК(a / b))

#include <iostream>
#include <time.h>

using namespace std;

int GcdRecursion(int a, int b)
{
   return (b == 0) ? a : GcdRecursion(b, a % b); // рекурсивная версия алгоритма Евклида с оптимизацией в виде тернарного оператора
   
//if (y == 0)             // Вариант полной записи
//      return a;
//return gcd(b, a % b);
      
}

int main()
{
    setlocale(LC_ALL, "Rus");
    srand(time(NULL));

    cout << "\n **********************************************************************" << endl;
    cout << " * Программа рекурсивной функции нахождения НОД двух целых чисел v1.0 *" << endl;
    cout << " **********************************************************************" << endl;

    int res = 0, num1 = 0, num2 = 0;

    cout << "Введите число №1: " << "\n";
    cin >> num1;

    cout << "Введите число №2: " << "\n";
    cin >> num2;

    res = GcdRecursion(num1, num2);

    cout << "\n";

    cout << "НОД двух введённых чисел равен: " << res << "\n";

    return 0;
}
