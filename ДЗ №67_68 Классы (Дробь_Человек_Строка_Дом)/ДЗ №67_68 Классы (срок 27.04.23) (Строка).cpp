// ДЗ №67_68 Классы (срок 27.04.23) (Строка)
//
// Создать класс Строка
// Поля:
//■ длина строки без учета нуль - терминатора;
//■ указатель на блок памяти, где хранится строка;
// память выделять динамически!
// Функции - члены:
//■ конструктор с параметром - строкой(const char*);
//■ конструктор с параметром длина строки;
//■ конструктор копирования;
//■ деструктор;
//■ вывод строки на экран;
//■ сеттер, принимающий в качестве параметра — строку(const char*). При нехватке уже выделенного блока динамической памяти для копирования в  него
// строки - параметра — произвести корректное перевыделение памяти.
//
// Примечание: перечень полей и функций - членов в заданиях 1 - 3 является рекомендованным, а не окончательным.При необходимости возможно добавление
// требуемых или желаемых полей и функций - членов

#include <iostream>
#include <Windows.h>
#include <cstring>

using namespace std;

class String {
public:
    // Конструктор, принимающий строку в качестве параметра
    String(const char* str) {
        length = strlen(str); // Определение длины строки
        buffer = new char[length + 1]; // Выделение памяти для хранения строки + 1 для нуль-терминатора
        strcpy_s(buffer, length + 1, str); // Копирование переданной строки в выделенную память
    }

    // Конструктор, принимающий длину строки
    String(int len) {
        length = len; // Установка длины строки
        buffer = new char[length + 1]; // Выделение памяти для хранения строки + 1 для нуль-терминатора
        buffer[0] = '\0'; // Установка нуль-терминатора для пустой строки
    }

    // Конструктор копирования
    String(const String& other) {
        length = other.length; // Копирование длины строки
        buffer = new char[length + 1]; // Выделение памяти для хранения строки + 1 для нуль-терминатора
        strcpy_s(buffer, length + 1, other.buffer); // Копирование строки из другого объекта
    }

    // Деструктор
    ~String() {
        delete[] buffer; // Освобождение выделенной памяти
    }

    // Вывод строки на экран
    void print() const {
        std::cout << buffer; // Вывод содержимого буфера
    }

    // Сеттер для установки строки
    void set(const char* str) {
        int newLength = strlen(str); // Определение длины новой строки
        if (newLength > length) { // Если новая строка длиннее, чем текущая
            delete[] buffer; // Освобождение старой памяти
            length = newLength; // Обновление длины
            buffer = new char[length + 1]; // Выделение новой памяти
        }
        strcpy_s(buffer, length + 1, str); // Копирование новой строки в буфер
    }

private:
    int length; // Длина строки без учета нуль-терминатора
    char* buffer; // Указатель на блок памяти для хранения строки
};

int main()
{
    setlocale(LC_ALL, "Rus");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    SetConsoleTitle(TEXT("Программа 'Строка V1.0'"));

    cout << "********************************************************" << endl;
    cout << "*          Программа 'Строка V1.0'                     *" << endl;
    cout << "********************************************************" << endl;

    String str1("Hello");
    String str2(10); // Создание строки с пустым буфером длины 10
    String str3 = str1; // Конструктор копирования

    str1.print(); // Вывод: Hello
    cout << endl;

    str2.set("World");
    str2.print(); // Вывод: World
    cout << endl;

    str3.print(); // Вывод: Hello
    cout << endl;

    return 0;
}

